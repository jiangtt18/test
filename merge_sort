def merge_sort

end

# smallest unit
#merger first , then sort

# call on merged and sorted one and continue to do the same thing
#stop when the merged length is equal to orginal's

def break_to_smallest_unit(str)
  str.each_char(&:to_i)
end

def merge(sorted_arr1, sorted_arr2)
  merged = []
  left = 0
  right = 0
  len1 = sorted_arr1.length
  len2 = sorted_arr2.length

  while left <len1 && right < len2
    element1 = sorted_arr1[left]
    element2 = sorted_arr2[right]
    if element1 <= element2
      merged << element1
      left += 1
    else
      merged << element2
      right += 1
    end
  end

  while left < len1
    merged << sorted_arr1[left]
    left += 1
  end

  while right < len2
    merged << sorted_arr2[right]
    right += 1
  end

  merged

end

def merge_sort(arr)
  puts "Starting: #{arr}"
  if arr.length == 1
    puts "Returning: #{arr}"
    return arr
  end
  low = 0
  high = arr.length - 1
  mid = (low + high) / 2
  left_half = arr[low..mid]
  puts "Left: #{left_half}"
  right_half = arr[mid+1..high]
  puts "Right:  #{right_half}"
  l = merge_sort(left_half)
  r = merge_sort(right_half)
  merged = merge(l,r)
  puts "Returning: #{merged}"
  merged
end

puts merge_sort([1,3,15,40,2,10,40,66].shuffle!)
